= Opening Database

All Sequel activity begins with opening a database connection, thus you always need a database connection
before you can perform any other actions.  Sequel provides a powerful and flexible mechanism for 
opening database connections.  There are three main approaches to opening and using a database connection:
  1. Use the connect method
  2. Use the specialized adapter method
  3. Passing a block to the either of the above

Each adapter has been extended to handle its specialized needs when establishing a connection, so there 
may be cases where one approach applies to one adapter, but not to the other.

== Using the Connect Method
The connect method takes a well-formed uri, which is parsed into the appropriate adapter and database 
connection parameters needed to open the database connection.  Upon successfully opening the connection 
to the database, a Database object is returned which then provides access to SQL and DDL statements
against the opened database connection.

Creates a new database object based on the supplied connection string
and optional arguments.  The specified scheme determines the database
class used, and the rest of the string specifies the connection options.
For example:

  DB = Sequel.connect('postgres://user:password@localhost/blog')
  DB = Sequel.connect('ado://blog')

== Using specialized adapter method
The specialized adapter method of connecting to a database allows you to turn:

  DB = Sequel.connect('postgres://user:password@localhost/my_db')

into:
  
  DB = Sequel.postgres('my_db', :user => 'user', :password => 'password', :host => 'localhost')

The following databases demonstrate how to open each of the databases and the syntax idiosyncrasies of 
opening each type.

=== ADO

The ADO adapter provides connectivity to ADO databases in Windows. ADO
databases can be opened using a URL with the ado schema:

  DB = Sequel.connect('ado://mydb')

or using the Sequel.ado method:

  DB = Sequel.ado('mydb')

The following options are supported:
* :driver
* :host
* :database - The name of the database to use
* :user - The user account name for logging in.
* :password - credential token for logging in.
* :command_timeout - Sets the time in seconds to wait while attempting
    to execute a command before cancelling the attempt and generating
    an error. Specifically, it sets the ADO CommandTimeout property.
    If this property is not set, the default of 30 seconds is used.
* :provider - Sets the Provider of this ADO connection (for example, "SQLOLEDB")

=== amalgalite 

* :database - The name of the database file
* :timeout - Timeout period given in milliseconds

=== db2 

=== dbi 

=== do 

=== firebird 

=== informix 

=== jdbc 

=== mysql 

=== odbc 
The ODBC adapter allows you to connect to any database driver with the appropriate ODBC drivers installed.  
ODBC is typically accessed via the Ruby DBI libraries configured with ODBC support.  To connect to an 
ODBC database, the DSN (Descriptive Service Name) from the ODBC configuration is utilized.

  DB = Sequel.odbc('mydb', :user => "user", :password => "password")

For Transact SQL (Sybase and Microsoft SQL Server), non-ANSI SQL identifiers are encased in brackets.  Thus,
you must indicate the :db_type as "mssql" for these databases.  For example:

  DB = Sequel.odbc('mydb', :user => "user", :password => "password", :db_type => "mssql")

Note:  For table names with non-ANSI identifiers, you'll need to use the following notation when obtaining a dataset 
with the shorthand approach:
  dataset = DB[:"Some Table"]

Which will result in the following SQL:
  "SELECT * FROM [Some Table]"

The following options are supported:
* :driver - The name of the ODBC driver to utilize.
* :database - The name of the database to use.
* :user - The user account name for logging in.
* :password - credential token for logging in.

=== openbase 
Not documented, yet.

=== oracle 

  DB = Sequel.oracle('my_db', :user => 'user', :password => 'password', :host => 'localhost')

* :host - the server name or IP Address to connect to
* :port - the port the server listens on
* :database - The name of the database to use
* :user - The user account name for logging in.
* :password - credential token for logging in.
* :privilege - The Oracle privilege level.

=== postgres

  DB = Sequel.postgres('my_db', :user => 'user', :password => 'password', :host => 'localhost')

* :host - the server name or IP Address to connect to
* :port - the port the server listens on
* :database - The name of the database to use
* :user - The user account name for logging in.
* :password - credential token for logging in.

=== sqlite

Without a filename argument, the sqlite adapter will setup a new sqlite database in memory.
  DB = Sequel.sqlite

This is equivalent to:
  DB = Sequel.connect('sqlite:/') 

and
  DB = Sequel.sqlite(':memory:')

To open a sqlite connection on a specific file:
  DB = Sequel.sqlite('my_blog.db')

To open a sqlite database in the current application's directory:
  DB = Sequel.connect('sqlite://blog.db') # ./blog.db

To specify an absolute path, use three slashes:
  DB = Sequel.connect('sqlite:///var/sqlite/blog.db') 

The maximum connections can be specified with the :max_connections option
  DB = Sequel.connect('sqlite:///blog.db', :max_connections=>10)

* :database - the database file name 
* :max_connections - maximum connections to establish in the connection pool

== Passing a ruby block to the connect method
The third way to utilize a Database connection is to open the connection only for the duration 
needed to execute some chunk of code.  

Both the connect method and the various adapter scheme methods can be passed a block when
calling.  This causes a connection to be opened, the block to be executed, and then the 
database connection closed immediately upon return from the block.

For example:
  Sequel.connect('sqlite://blog.db'){|db| puts db[:users].count}  
